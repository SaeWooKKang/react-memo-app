{"version":3,"sources":["GlobalStyles.js","Loader.js","redux/reducers/memoSlice.js","component/fs.js","component/InputBar.jsx","component/TodoDateRow.jsx","component/Todo.jsx","component/TodoList.jsx","component/CompletedList.jsx","component/Container.js","redux/store.js","index.js"],"names":["globalStyles","createGlobalStyle","reset","Loader","type","color","height","width","memoSlice","createSlice","name","initialState","todoDatum","doneDatum","isLoading","reducers","state","action","payload","fetchLocalStorageData","JSON","parse","localStorage","getItem","setTodoDatum","setDoneDatum","deleteTodoDatum","deleteDoneDatum","actions","compare","key","a","b","makeDate","date","dateObj","Date","year","getFullYear","month","getMonth","day","getDate","saveData","console","log","setItem","stringify","InputBar","useState","inputText","setInputText","dispatch","useDispatch","useSelector","memo","handleAddNewTodoText","e","onAddNewTodoText","preventDefault","newTodoText","newTodoData","text","startDate","now","doneDate","arrayedTodoDatum","sort","className","onSubmit","placeholder","value","onChange","target","id","onClick","TodoDateRow","today","Todo","todo","todoData","TodoList","props","onDeleteTodo","handleDeleteTodo","useCallback","onDoneTodo","doneTodo","filter","Number","newDoneTodo","handleDoneTodo","copyDatum","rows","lastCategory","forEach","idx","todoDate","push","parentNode","matches","CompletedList","doneData","doneYear","doneMonth","doneDay","doneYearMonth","doneYearMonthDate","concat","startYear","startMonth","startDay","startYearMonthDate","Container","useEffect","getTodoDatum","datum","datumType","deletedDatum","data","deletedData","GlobalStyles","store","configureStore","reducer","memoReducer","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.516f1635.chunk.js","sourcesContent":["import { createGlobalStyle } from \"styled-components\";\r\nimport reset from \"styled-reset\";\r\n\r\nconst globalStyles = createGlobalStyle`${reset}`;\r\n\r\nexport default globalStyles;\r\n","import React from \"react\";\r\nimport ReactLoading from \"react-loading\";\r\n\r\nconst Loader = () => (\r\n  <ReactLoading type={\"bubbles\"} color={\"blue\"} height={\"20%\"} width={\"20%\"} />\r\n);\r\n\r\nexport default Loader;\r\n","import { createSlice } from '@reduxjs/toolkit';\r\n\r\nconst initialState = {\r\n  todoDatum: [],\r\n  doneDatum: [],\r\n  isLoading: true,\r\n};\r\n\r\nexport const memoSlice = createSlice({\r\n  name: 'memo',\r\n  initialState,\r\n  reducers: {\r\n    isLoading: (state, action) => { state.isLoading = action.payload },\r\n    fetchLocalStorageData: ( state, action ) => { state[action.payload]= JSON.parse(localStorage.getItem(action.payload)) || []},\r\n    setTodoDatum: (state, action) => {state.todoDatum = [...action.payload, ...state.todoDatum]},\r\n    setDoneDatum: (state, action) => {state.doneDatum = [...action.payload]},\r\n    deleteTodoDatum: (state, action) => {state.todoDatum = [...action.payload]},\r\n    deleteDoneDatum: (state, action) => {state.doneDatum = [...action.payload]}\r\n\r\n  }\r\n});\r\n\r\nexport const { isLoading, fetchLocalStorageData, setTodoDatum, deleteTodoDatum, setDoneDatum, deleteDoneDatum } = memoSlice.actions;\r\n\r\nexport default memoSlice.reducer;","export const compare = (key) => (a, b) =>\r\n  a[key] < b[key] ? 1 : a[key] > b[key] ? -1 : 0;\r\n\r\n// CompletedList, todoDateRow\r\nexport const makeDate = (date) => {\r\n  const dateObj = new Date(date);\r\n  const YEAR = dateObj.getFullYear();\r\n  const MONTH = dateObj.getMonth() + 1;\r\n  const DAY = dateObj.getDate();\r\n\r\n  return { year: YEAR, month: MONTH, day: DAY };\r\n};\r\n\r\nexport const log = console.log;\r\n\r\nexport const saveData = (name, todoDatum) => {\r\n  localStorage.setItem(name, JSON.stringify(todoDatum));\r\n};","import React, { memo, useState } from \"react\";\r\n\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport {setTodoDatum} from '../redux/reducers/memoSlice';\r\n\r\nimport {compare} from './fs';\r\nimport {saveData} from './fs';\r\n\r\nconst InputBar = () => {\r\n  const [inputText, setInputText] = useState(\"\");\r\n\r\n  const dispatch = useDispatch();\r\n  const todoDatum = useSelector((state) =>state.memo.todoDatum);\r\n\r\n  const handleInputTextChange = (e) => {\r\n    setInputText(e.target.value);\r\n  };\r\n  const handleAddNewTodoText = (e) => {\r\n    onAddNewTodoText(inputText);\r\n    e.preventDefault();\r\n    setInputText(\"\");\r\n  };\r\n\r\n  const onAddNewTodoText = (newTodoText) => {\r\n\r\n    if (!newTodoText) return null;\r\n\r\n    const newTodoData = {\r\n      text: newTodoText,\r\n      startDate: Date.now(),\r\n      doneDate: null,\r\n    };\r\n\r\n    const arrayedTodoDatum = [newTodoData, ...todoDatum].sort(\r\n      compare(\"startDate\")\r\n    );\r\n\r\n    dispatch(setTodoDatum([newTodoData])); // [{}, {}, {}}]\r\n\r\n    saveData(\"todoDatum\", arrayedTodoDatum);\r\n  }\r\n  \r\n  return (\r\n    <form className=\"inputBar\" onSubmit={handleAddNewTodoText}>\r\n      <input\r\n        className=\"input\"\r\n        type=\"text\"\r\n        placeholder=\"Write to do!\"\r\n        value={inputText}\r\n        onChange={handleInputTextChange}\r\n      />\r\n      <ion-icon\r\n        id=\"add\"\r\n        name=\"add-outline\"\r\n        onClick={handleAddNewTodoText}\r\n      ></ion-icon>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default memo(InputBar);\r\n","import React, { memo } from \"react\";\r\nimport { makeDate } from \"./fs\";\r\n\r\nconst TodoDateRow = ({ date }) => {\r\n  const today = makeDate(date);\r\n  const { year, month } = today;\r\n  return <div className=\"todoDateRow\">{`${year}.${month}`}</div>;\r\n};\r\n\r\nexport default memo(TodoDateRow);\r\n","import React, { memo } from \"react\";\r\n\r\nconst Todo = memo(({ todoData }) => {\r\n  const todo = todoData.text;\r\n  return <div className=\"todo\">{todo}</div>;\r\n});\r\n\r\nexport default Todo;\r\n","import React, { memo, useCallback } from \"react\";\r\nimport TodoDateRow from \"./TodoDateRow\";\r\nimport Todo from \"./Todo\";\r\nimport {compare} from './fs';\r\n\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { setDoneDatum } from '../redux/reducers/memoSlice';\r\nimport {saveData} from './fs';\r\n\r\nconst TodoList = (props) => {\r\n  const { onDeleteTodo } = props;\r\n\r\n  const todoDatum = useSelector(state => state.memo.todoDatum);\r\n  const doneDatum = useSelector(state => state.memo.doneDatum);\r\n  \r\n  const dispatch = useDispatch();\r\n\r\n  const onClickRouter = ({ target }) => {\r\n    const { id } = target.parentNode;\r\n\r\n    if (target.matches(\"#delete\")) {\r\n      handleDeleteTodo(id);\r\n    } else if (target.matches(\"#done\")) {\r\n      handleDoneTodo(id);\r\n    }\r\n  };\r\n\r\n  const handleDeleteTodo = useCallback((id) => {\r\n    onDeleteTodo(id, todoDatum, \"todoDatum\");\r\n  },[onDeleteTodo, todoDatum]);\r\n\r\n  const onDoneTodo = useCallback(\r\n    (key, todoDatum) => {\r\n      let doneTodo = handleDeleteTodo(key, todoDatum, \"todoDatum\"); // [{}]\r\n\r\n      doneTodo = todoDatum.filter((a) => a.startDate === Number(key));\r\n\r\n      doneTodo.doneDate = Date.now();\r\n      const newDoneTodo = [...doneTodo, ...doneDatum].sort(compare(\"doneDate\"));\r\n      \r\n      dispatch(setDoneDatum(newDoneTodo));\r\n      saveData(\"doneDatum\", newDoneTodo);\r\n    },\r\n    [handleDeleteTodo, doneDatum, dispatch]\r\n  );\r\n\r\n  const handleDoneTodo = (id) => {\r\n    onDoneTodo(id, todoDatum);\r\n  };\r\n\r\n  const copyDatum = [...todoDatum];\r\n  const rows = [];\r\n  let lastCategory = null;\r\n\r\n  if (!copyDatum) return null;\r\n\r\n  copyDatum.forEach((todoData, idx) => {\r\n    if (todoData.todoDate !== lastCategory) {\r\n      rows.push(<TodoDateRow date={todoData.startDate} key={idx} />);\r\n    }\r\n    rows.push(\r\n      <div\r\n        className=\"todoData\"\r\n        key={todoData.startDate}\r\n        id={todoData.startDate}\r\n      >\r\n        <Todo todoData={todoData} />\r\n        <ion-icon\r\n          id=\"done\"\r\n          className=\"done\"\r\n          name=\"checkmark-circle-outline\"\r\n        ></ion-icon>\r\n        <ion-icon\r\n          id=\"delete\"\r\n          className=\"delete\"\r\n          name=\"close-circle-outline\"\r\n        ></ion-icon>\r\n      </div>\r\n    );\r\n    lastCategory = todoData.todoDate;\r\n  });\r\n  return (\r\n    <div onClick={onClickRouter} className=\"todoList\">\r\n      <div>{rows}</div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default memo(TodoList);\r\n","import React, { memo } from \"react\";\r\nimport TodoDateRow from \"./TodoDateRow\";\r\nimport Todo from \"./Todo\";\r\nimport { makeDate } from \"./fs\";\r\n\r\nconst CompletedList = (props) => {\r\n  const { onDeleteTodo, doneDatum } = props;\r\n\r\n  const handleDeleteTodo = ({ target }) => {\r\n    if (!target.matches(\".todoData>ion-icon\")) return null;\r\n    onDeleteTodo(target.parentNode.parentNode.id, doneDatum, \"doneDatum\");\r\n  };\r\n  const rows = [];\r\n  let lastCategory = \"\";\r\n\r\n  doneDatum.forEach((doneData, idx) => {\r\n    const doneDate = makeDate(doneData.doneDate);\r\n    const { year: doneYear, month: doneMonth, day: doneDay } = doneDate;\r\n\r\n    const doneYearMonth = `${doneYear}.${doneMonth}`;\r\n    const doneYearMonthDate = doneYearMonth.concat(\".\", doneDay);\r\n\r\n    const startDate = makeDate(doneData.startDate);\r\n    const { year: startYear, month: startMonth, day: startDay } = startDate;\r\n    const startYearMonthDate = `${startYear}.${startMonth}.${startDay}`;\r\n\r\n    if (doneYearMonth !== lastCategory) {\r\n      rows.push(<TodoDateRow date={doneData.doneDate} key={idx} />);\r\n    }\r\n    rows.push(\r\n      <div\r\n        key={doneData.startDate}\r\n        onClick={handleDeleteTodo}\r\n        id={doneData.startDate}\r\n      >\r\n        <div className=\"period\">\r\n          {startYearMonthDate}~{doneYearMonthDate}\r\n        </div>\r\n        <div className=\"todoData\">\r\n          <Todo todoData={doneData} />\r\n          <ion-icon\r\n            id=\"delete\"\r\n            name=\"close-circle-outline\"\r\n            className=\"delete\"\r\n          ></ion-icon>\r\n        </div>\r\n      </div>\r\n    );\r\n    lastCategory = doneYearMonth;\r\n  });\r\n  return (\r\n    <div>\r\n      <div className=\"title\">Completed</div>\r\n      <div className=\"doneList\">{rows}</div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default memo(CompletedList);\r\n","import React, { useEffect, useCallback } from \"react\";\nimport GlobalStyles from \"../GlobalStyles\";\nimport \"../css/style.scss\";\nimport Loader from \"../Loader\";\nimport InputBar from \"./InputBar\";\nimport TodoList from \"./TodoList\";\nimport CompletedList from \"./CompletedList\";\n\nimport { useDispatch, useSelector } from 'react-redux';\nimport { isLoading, fetchLocalStorageData, deleteTodoDatum, deleteDoneDatum } from '../redux/reducers/memoSlice';\n\nimport {saveData} from './fs';\n\nconst Container = () => {\n  const dispatch = useDispatch();\n\n  const memo = useSelector(state => state.memo);\n  const doneDatum = useSelector(state => state.memo.doneDatum);\n\n  useEffect(() => {\n    getTodoDatum();\n  }, []);\n\n  const getTodoDatum = useCallback(() => {\n    dispatch(fetchLocalStorageData('todoDatum'));\n    dispatch(fetchLocalStorageData('doneDatum'));\n    dispatch(isLoading(false));\n  }, [dispatch]);\n  \n  // TodoList, CompletedList 사용\n  const handleDeleteTodo = (key, datum, datumType) => {\n    const copyDatum = [...datum]; // [{}, {}, ...]\n\n    // 해당 데이터 지운 나머지 값들 \n    const deletedDatum = copyDatum.filter(\n      (data) => data.startDate !== Number(key)\n    );\n    // 삭제 된 {} \n    const deletedData = copyDatum.filter((a) => a.startDate === Number(key));\n    \n    // store 저장\n    datumType === \"todoDatum\"\n      ? dispatch(deleteTodoDatum(deletedDatum))\n      : dispatch(deleteDoneDatum(deletedDatum));\n    \n    // localstorage 저장\n    saveData(datumType, deletedDatum);\n\n    return deletedData;\n  };\n  \n  return memo.isLoading ? (\n    <div className={\"loader\"}>\n      <Loader />\n    </div>\n  ) : (\n    <div className=\"container\">\n      <GlobalStyles />\n      <div className=\"left\">\n        <InputBar />\n        <TodoList onDeleteTodo={handleDeleteTodo}/>\n      </div>\n      <div className=\"right\">\n        <CompletedList doneDatum={doneDatum} onDeleteTodo={handleDeleteTodo} />\n      </div>\n    </div>\n  );\n};\n\nexport default Container;\n","import { configureStore } from '@reduxjs/toolkit';\r\nimport memoReducer from './reducers/memoSlice';\r\n\r\nexport const store = configureStore({\r\n  reducer: {\r\n    memo: memoReducer\r\n  }\r\n});","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport Container from \"./component/Container\";\nimport {store} from './redux/store';\nimport {Provider} from 'react-redux';\n\nReactDOM.render(\n  <Provider store={store}>\n    <Container />\n  </Provider>\n, document.getElementById(\"root\"));\n"],"sourceRoot":""}